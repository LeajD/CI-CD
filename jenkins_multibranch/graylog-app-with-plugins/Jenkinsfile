pipeline {
    environment {
        version = "4.3.13"
        ver_alert_main = "4.4.1" 
        ver_alert_minor = "4.2.0"
        ver_alert_junior = "4.1.0"
        maven = "3.8.8"
        repository = "$AZURE_CR"
        auth_docker = credentials('$AZUREC_CR')
        app = "name_of_app"
    }

    agent { node { label 'docker' } }

    stages {
        stage('Repository scan') {
            steps {
                echo 'Scanning....'
                sh 'trivy repository --scanners vuln,misconfig,secret,license ./'
            } 
            post {
                success {
                    echo 'repo security scan done!'
                    mattermostSend color: "#0000FF", message: "Stage 'Repository scan' successfull! \n\n Pipeline: ${env.pipeline} image: ${env.image}:${env.version} \n Docker repo: ${env.repository}[] \n Jenkins: (<${env.BUILD_URL}|Open>) \n More info: \n Branch: ${env.BRANCH_NAME} \n NODE_LABELS: ${env.NODE_LABELS} \n JOB_NAME: ${env.JOB_NAME} \n BUILD_URL: ${env.BUILD_URL} \n git URL: ${env.GIT_URL} \n Test results: ${env.RUN_ARTIFACTS_DISPLAY_URL}"
                }
                failure {
                    echo 'repo security scan failure!'
                    mattermostSend color: "danger", message: "Stage 'Repository scan' failed! \n\n Pipeline: ${env.pipeline} image: ${env.image}:${env.version} \n Docker repo: ${env.repository}[] \n  Jenkins: (<${env.BUILD_URL}|Open>) \n More info: \n Branch: ${env.BRANCH_NAME} \n NODE_LABELS: ${env.NODE_LABELS} \n JOB_NAME: ${env.JOB_NAME} \n BUILD_URL: ${env.BUILD_URL} \n git URL: ${env.GIT_URL} \n Test results: ${env.RUN_ARTIFACTS_DISPLAY_URL}"
                }
            }
        }
        stage('Get gitlab plugins') {
          steps {
              echo 'getting plugins from gitlab'
              sh 'rm -rf /home/jenkins/.m2/repository/com/company/graylog-plugin-*'
              sh 'sh gitlab/maven.sh'
              sh 'find /home/jenkins/.m2/repository/com/company/ -name *.jar'
              sh 'for i in $(cd /home/jenkins/.m2/repository/com/company/ && find ./ -name *.jar); do cp /home/jenkins/.m2/repository/com/company/$i assets/plugins/; done'
              sh 'ls assets/plugins'
          }
          post {
              success {
                  echo 'SUCCESS getting plugins from gitlab'
                  mattermostSend color: "#0000FF", message: "Stage 'Get gitlab plugins' successfull! \n\n Pipeline: ${env.pipeline} image: ${env.image}:${env.version} \n Docker repo: ${env.repository}[] \n  Jenkins: (<${env.BUILD_URL}|Open>) \n More info: \n Branch: ${env.BRANCH_NAME} \n NODE_LABELS: ${env.NODE_LABELS} \n JOB_NAME: ${env.JOB_NAME} \n BUILD_URL: ${env.BUILD_URL} \n git URL: ${env.GIT_URL} \n Test results: ${env.RUN_ARTIFACTS_DISPLAY_URL}"
              }
              failure {
                 echo 'Failed getting plugins from gitlab'
                 mattermostSend color: "danger", message: "Stage 'Get gitlab plugins' failed! \n\n Pipeline: ${env.pipeline} image: ${env.image}:${env.version} \n Docker repo: ${env.repository}[] \n  Jenkins: (<${env.BUILD_URL}|Open>) \n More info: \n Branch: ${env.BRANCH_NAME} \n NODE_LABELS: ${env.NODE_LABELS} \n JOB_NAME: ${env.JOB_NAME} \n BUILD_URL: ${env.BUILD_URL} \n git URL: ${env.GIT_URL} \n Test results: ${env.RUN_ARTIFACTS_DISPLAY_URL}"
              }
          }
        }
        stage('Build') {
            steps {
                echo 'Building..'
                sh 'docker version'
                sh 'docker build . -f assets/Dockerfile -t ${repository}/${app}:${version} --label=graylog --build-arg version="${version}" --build-arg ver_alert_main="${ver_alert_main}" --build-arg ver_alert_minor="${ver_alert_minor}" --build-arg maven="${maven}" --build-arg ver_alert_junior="${ver_alert_junior}"'

            }
            post {
                success {
                    echo 'Build successfull! nothing to do now...'
                    mattermostSend color: "#0000FF", message: "Build 'building graylog container' successfull! \n\n Pipeline: ${env.pipeline} image: ${env.image}:${env.version} \n Docker repo: ${env.repository}[] \n  Jenkins: (<${env.BUILD_URL}|Open>) \n More info: \n Branch: ${env.BRANCH_NAME} \n NODE_LABELS: ${env.NODE_LABELS} \n JOB_NAME: ${env.JOB_NAME} \n BUILD_URL: ${env.BUILD_URL} \n git URL: ${env.GIT_URL} \n Test results: ${env.RUN_ARTIFACTS_DISPLAY_URL}"
                }
                failure {
                    echo 'Build failed... docker rmi...'
                    sh "docker rmi \$(docker images | grep none | grep -E '([1-59] minutes|seconds)|(About a minute ago)|(About an hour ago)'| awk '{print \$3}')" //check if only failed layers are none
                   echo '...deleted docker image'
                   mattermostSend color: "danger", message: "Build 'building graylog container' failed! \n\n Pipeline: ${env.pipeline} image: ${env.image}:${env.version} \n Docker repo: ${env.repository}[] \n  Jenkins: (<${env.BUILD_URL}|Open>) \n More info: \n Branch: ${env.BRANCH_NAME} \n NODE_LABELS: ${env.NODE_LABELS} \n JOB_NAME: ${env.JOB_NAME} \n BUILD_URL: ${env.BUILD_URL} \n git URL: ${env.GIT_URL} \n Test results: ${env.RUN_ARTIFACTS_DISPLAY_URL}"
                }
            }
        }


        stage('Pushing to Docker Registry') {
            steps {
                echo 'Pushing images to repository ${repository}'
                sh 'docker login ${repository} -u ${auth_docker_USR} -p ${auth_docker_PSW}'
                sh 'docker tag ${repository}/${app}:${version} ${repository}/${app}:${version}_gitlab'
                sh 'docker push ${repository}/${app}:${version}_gitlab'
            }
            post {
              success {  mattermostSend color: "#0000FF", message: "Stage 'push to docker registry' successfull! \n\n Pipeline: ${env.pipeline} image: ${env.image}:${env.version} \n Docker repo: ${env.repository}[] \n  Jenkins: (<${env.BUILD_URL}|Open>) \n More info: \n Branch: ${env.BRANCH_NAME} \n NODE_LABELS: ${env.NODE_LABELS} \n JOB_NAME: ${env.JOB_NAME} \n BUILD_URL: ${env.BUILD_URL} \n git URL: ${env.GIT_URL} \n Test results: ${env.RUN_ARTIFACTS_DISPLAY_URL}"             }
              failure {  mattermostSend color: "danger", message: "Stage 'push to docker registry' failed! \n\n Pipeline: ${env.pipeline} image: ${env.image}:${env.version} \n Docker repo: ${env.repository}[] \n  Jenkins: (<${env.BUILD_URL}|Open>) \n More info: \n Branch: ${env.BRANCH_NAME} \n NODE_LABELS: ${env.NODE_LABELS} \n JOB_NAME: ${env.JOB_NAME} \n BUILD_URL: ${env.BUILD_URL} \n git URL: ${env.GIT_URL} \n Test results: ${env.RUN_ARTIFACTS_DISPLAY_URL}"              }
            }
        }


        stage('Scan') {
            steps {
                sh 'trivy --format table --password ${auth_docker_PSW} --username ${auth_docker_USR} image ${repository}/${app}:${version}_gitlab'
            }
            post {
              success {  mattermostSend color: "good", message: "trivy scan successfull! \n\n Pipeline: ${env.pipeline} image: ${env.image}:${env.version} \n Docker repo: ${env.repository}[] \n  Jenkins: (<${env.BUILD_URL}|Open>) \n More info: \n Branch: ${env.BRANCH_NAME} \n NODE_LABELS: ${env.NODE_LABELS} \n JOB_NAME: ${env.JOB_NAME} \n BUILD_URL: ${env.BUILD_URL} \n git URL: ${env.GIT_URL} \n Test results: ${env.RUN_ARTIFACTS_DISPLAY_URL}"             }
              failure {  mattermostSend color: "danger", message: "trivy scan failed! \n\n Pipeline: ${env.pipeline} image: ${env.image}:${env.version} \n Docker repo: ${env.repository}[/] \n  Jenkins: (<${env.BUILD_URL}|Open>) \n More info: \n Branch: ${env.BRANCH_NAME} \n NODE_LABELS: ${env.NODE_LABELS} \n JOB_NAME: ${env.JOB_NAME} \n BUILD_URL: ${env.BUILD_URL} \n git URL: ${env.GIT_URL} \n Test results: ${env.RUN_ARTIFACTS_DISPLAY_URL}"              }
            }
        }
    }
}
